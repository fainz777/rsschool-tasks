!function(t){var e={};function s(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,o){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(o,i,function(e){return t[e]}.bind(null,i));return o},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);s(1);class o{static getColor(t){if("string"==typeof t)return`#${t}`;let e=[...t];try{e[3]=4===e.length?(e[3]/255).toFixed(2):1,e=`rgba(${e.join(",")})`}catch(t){return"#000"}return e}static showMessage(t){alert(t)}static randomInteger(t,e){let s=t+Math.random()*(e-t);return s=parseInt(s,10)}static objectToQuery(t){const e=[];return Object.keys(t).forEach(s=>{e.push(`${s}=${t[s]}`)}),e.join("&")}static getImageSizes(t,e,s){const o=t>e?s/t:s/e;return{width:t*o,height:e*o}}static getImagePosition(t,e){return t.width>t.height?{x:0,y:(e-t.height)/2}:{x:(e-t.width)/2,y:0}}}class i{constructor(t){this.canvas=t,this.canvasTools=document.querySelectorAll("[data-action]"),this.toolsActions={paintBucket:"fillArea",pencil:"drawByPencil",colorPicker:"chooseColor"},this.keyBindingsCodes=["KeyB","KeyP","KeyC"],this.keyBindingsTools={KeyB:"paintBucket",KeyC:"colorPicker",KeyP:"pencil"},this.currentTool="pencil",this.canvas.canvasNode.classList.add(this.currentTool)}get toolAction(){return this.toolsActions[this.currentTool]}removeToolsActiveClass(){this.canvasTools.forEach(t=>{t.classList.remove("active")})}setTool(t){this.removeToolsActiveClass(),t.classList.add("active");const{tool:e}=t.dataset;this.canvas.canvasNode.classList.remove(this.currentTool),this.currentTool=e,this.canvas.canvasNode.classList.add(this.currentTool),this.canvas.saveCanvasState()}clearCanvas(){this.canvas.clearCanvas()}manageKeyBindings(t){this.keyBindingsCodes.includes(t.code)&&document.querySelector(`[data-tool="${this.keyBindingsTools[t.code]}"]`).click()}setEvents(){this.canvasTools.forEach(t=>{const{action:e}=t.dataset;t.addEventListener("click",this[e].bind(this,t))}),document.addEventListener("keyup",this.manageKeyBindings.bind(this))}init(){this.setEvents()}}class a{constructor(t){this.canvas=t,this.currenColorField=document.getElementById("current_color"),this.currentColorIcon=document.querySelector(".icon_color--current-color"),this.prevColorIcon=document.querySelector(".icon_color--prev_color"),this.currentColor=window.getComputedStyle(this.currentColorIcon).backgroundColor,this.prevColor=window.getComputedStyle(this.prevColorIcon).backgroundColor,this.colorChangeElems=document.querySelectorAll(".item--color_change")}setEvents(){this.currenColorField.addEventListener("change",this.changeCurrentColor.bind(this)),this.colorChangeElems.forEach(t=>{t.addEventListener("click",this.setColors.bind(this,t))})}changeCurrentColor(t){const e=t.target.value;this.setPrevColor(this.currentColor),this.setCurrentColor(e)}setCurrentColor(t){this.currentColor=t,this.currentColorIcon.style.backgroundColor=t,this.canvas.saveCanvasState()}setPrevColor(t){this.prevColor=t,this.prevColorIcon.style.backgroundColor=t}setColors(t){const e=t.querySelector(".icon_color"),s=window.getComputedStyle(e).backgroundColor;this.setPrevColor(this.currentColor),this.setCurrentColor(s)}init(){this.setEvents()}}class r{constructor(t){this.canvas=t,this.canvasChangeElems=document.querySelectorAll(".canvas_change")}setEvents(){this.canvasChangeElems.forEach(t=>{t.classList.contains("active")&&this.changeCanvasSize.bind(t),t.addEventListener("click",this.changeCanvasSize.bind(this,t))})}changeCanvasSize(t){const e=t.classList;e.contains("active")||(document.querySelector(".canvas_change.active").classList.remove("active"),e.add("active"),this.canvas.pixels=t.dataset.pixels,this.canvas.saveCanvasState())}init(){this.setEvents()}}var n={ACCESS_KEY:"0ec9ad8c2c6a8f54fca9429f12e4d3f24cccac9a7a0fde91bf1bb8817b3134ff",UNSPLASH_API_URL:"https://api.unsplash.com/"};class c{constructor(t){this.baseUrl=t}async httpGet(t){const e=`${this.baseUrl}${t}`,s=await fetch(e);return s.status,await s.json()}}class l{constructor(){this.httpClient=new c(n.UNSPLASH_API_URL),this.apiKey=n.ACCESS_KEY}prepareQuery(t){return`${o.objectToQuery(t)}&client_id=${this.apiKey}`}async searchPhotos(t){const e=this.prepareQuery({query:t});return await this.httpClient.httpGet(`/search/photos?${e}`)}}class h{constructor(t){this.canvas=t,this.unsplashService=new l,this.form=document.querySelector("#search_image_form"),this.seachField=document.querySelector("#search_image_field"),this.errorMessageNode=document.querySelector("#search_image_errors"),this.searchSubmitButton=document.querySelector("#search_submit_button"),this.isInProgress=!1,this.errorMessages={emptyField:"Please enter a searching string.",notFound:"Nothing was found. Please try another value"}}validateForm(){return!!this.seachField.value.trim()||(this.showErrorMessage(this.errorMessages.emptyField),!1)}showErrorMessage(t){this.errorMessageNode.innerText=t}setProgressState(t){t?(this.isInProgress=!0,this.searchSubmitButton.disabled=!0,this.form.classList.add("in_progress")):(this.isInProgress=!1,this.searchSubmitButton.disabled=!1,this.form.classList.remove("in_progress"))}async searchImage(t){if(t.preventDefault(),this.isInProgress)return!1;if(this.setProgressState(!0),!this.validateForm())return this.setProgressState(!1),!1;const{value:e}=this.seachField,s=await this.unsplashService.searchPhotos(e);if(!s||!s.total)return this.showErrorMessage(this.errorMessages.notFound),!1;this.setProgressState(!1),this.canvas.canvasImage=s.results[o.randomInteger(0,10)].urls}setEvents(){this.form.addEventListener("submit",this.searchImage.bind(this))}init(){this.setEvents()}}class d{constructor(t){t?(this.canvasId=t,this.canvasNode=document.getElementById(this.canvasId),this.canvasNode?(this.searchImage=new h(this),this.canvasTools=new i(this),this.colorTools=new a(this),this.canvasSizeSwitcher=new r(this),this.width=this.canvasNode.width,this.height=this.canvasNode.height,this.ctx=this.canvasNode.getContext("2d"),this.pixels=128,this.isPencilDrawStart=!1,this.pencilX=0,this.pencilY=0,this.eventsTypes={mousedown:"mousedown",mouseup:"mouseup",mousemove:"mousemove"}):o.showMessage(`Error: canvas element with id ${t} was not found.`)):o.showMessage("Error: canvasId is not set.")}get pixelSize(){return this.width/this.pixels}set canvasImage(t){this.loadImage(t.regular)}setEvents(){const t=document.querySelector("#grayscale_button");this.canvasNode.addEventListener("mousedown",this.manageCanvasActions.bind(this)),this.canvasNode.addEventListener("mouseup",this.manageCanvasActions.bind(this)),this.canvasNode.addEventListener("mousemove",this.manageCanvasActions.bind(this)),t.addEventListener("click",this.grayscaleImage.bind(this))}clearCanvas(){this.resetTools(),this.ctx.clearRect(0,0,this.width,this.height),this.saveCanvasState()}manageCanvasActions(t){const e=this.canvasTools.toolAction;e&&this[e](t)}resetTools(){this.isPencilDrawStart=!1,this.pencilX=0,this.pencilY=0}fillArea(t){t.type===this.eventsTypes.mousedown&&(this.ctx.fillStyle=this.colorTools.currentColor,this.ctx.fillRect(0,0,this.width,this.height),this.saveCanvasState())}drawByPencil(t){const e=this.getPointerPosition(t.clientX,t.clientY);t.type===this.eventsTypes.mousedown?(this.isPencilDrawStart=!0,this.drawPixel(e),this.pencilX=e.x,this.pencilY=e.y,this.saveCanvasState()):t.type===this.eventsTypes.mousemove&&this.isPencilDrawStart?(this.drawLine(this.pencilX,this.pencilY,e.x,e.y),this.saveCanvasState()):t.type===this.eventsTypes.mouseup&&(this.isPencilDrawStart=!1)}drawLine(t,e,s,o){Math.abs(o-e)<Math.abs(s-t)?t>s?this.drawLineLow(s,o,t,e):this.drawLineLow(t,e,s,o):e>o?this.drawLineHigh(s,o,t,e):this.drawLineHigh(t,e,s,o),this.pencilX=s,this.pencilY=o}drawLineLow(t,e,s,o){const i=s-t;let a=o-e,r=1;a<0&&(r=-1,a=-a);let n=2*a-i,c=e;for(let e=t;e<=s;e+=1)this.drawPixel({x:e,y:c}),n>0&&(c+=r,n-=2*i),n+=2*a}drawLineHigh(t,e,s,o){let i=s-t;const a=o-e;let r=1;i<0&&(r=-1,i=-i);let n=2*i-a,c=t;for(let t=e;t<=o;t+=1)this.drawPixel({x:c,y:t}),n>0&&(c+=r,n-=2*a),n+=2*i}drawPixel(t){this.ctx.fillStyle=this.colorTools.currentColor,this.ctx.fillRect(t.x*this.pixelSize,t.y*this.pixelSize,this.pixelSize,this.pixelSize)}getPointerPosition(t,e){const s=this.canvasNode.getBoundingClientRect();return{x:Math.floor((t-s.left)/this.pixelSize),y:Math.floor((e-s.top)/this.pixelSize)}}getPointedColor(t,e){const s=this.canvasNode.getBoundingClientRect(),i=t-s.left,a=e-s.top;let r=this.ctx.getImageData(i,a,1,1).data;return r=o.getColor(r)}drawImage(t){this.clearCanvas();const e=o.getImageSizes(t.width,t.height,this.width),s=o.getImagePosition(e,this.width);this.ctx.drawImage(t,s.x,s.y,e.width,e.height),this.saveCanvasState()}chooseColor(t){if(t.type===this.eventsTypes.mousedown){const e=this.getPointedColor(t.clientX,t.clientY);this.colorTools.setPrevColor(this.colorTools.currentColor),this.colorTools.currentColor=e,this.colorTools.currenColorField.value=e,this.colorTools.setCurrentIconColor(this.colorTools.currenColorField,e)}}grayscaleImage(){const t=this.ctx.getImageData(0,0,this.width,this.height),{data:e}=t;if(e.every(t=>0===t))return o.showMessage("The canvas is empty. Please draw something or load an image before apply grayscale."),!1;for(let t=0;t<e.length;t+=4){const s=(e[t]+e[t+1]+e[t+2])/3;e[t]=s,e[t+1]=s,e[t+2]=s}this.ctx.putImageData(t,0,0),this.saveCanvasState()}loadImage(t){const e=new Image;e.src=t,e.crossOrigin="anonymous",e.onload=this.drawImage.bind(this,e)}saveCanvasState(){const t={imageSrc:this.canvasNode.toDataURL(),pixels:this.pixels,currentTool:this.canvasTools.currentTool,currentColor:this.colorTools.currentColor,prevColor:this.colorTools.prevColor||"ts"};localStorage.setItem(this.canvasId,JSON.stringify(t))}getCanvasState(){const t=localStorage.getItem(this.canvasId);if(t)try{const e=JSON.parse(t);e.pixels&&this.canvasSizeSwitcher.canvasChangeElems.forEach(t=>{t.dataset.pixels===e.pixels&&t.click()}),e.currentTool&&this.canvasTools.canvasTools.forEach(t=>{t.dataset.tool===e.currentTool&&t.click()}),e.currentColor&&this.colorTools.setCurrentColor(e.currentColor),e.prevColor&&this.colorTools.setPrevColor(e.prevColor),this.loadImage(e.imageSrc)}catch(t){alert("Loading saving state was failed. An empty canvas will create.")}}init(){this.searchImage.init(),this.canvasTools.init(),this.colorTools.init(),this.canvasSizeSwitcher.init(),this.getCanvasState(),this.setEvents()}}document.addEventListener("DOMContentLoaded",(function(){new d("palette").init()}))},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NhbnZhc1Rvb2xzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb2xvclRvb2xzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jYW52YXNTaXplU3dpdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL19jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2h0dHBDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Vuc3BsYXNoU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc2VhcmNoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJIZWxwZXJzIiwiY29sb3IiLCJyZ2JhQ29sb3IiLCJsZW5ndGgiLCJ0b0ZpeGVkIiwiam9pbiIsImUiLCJtZXNzYWdlIiwiYWxlcnQiLCJtaW4iLCJtYXgiLCJyYW5kIiwiTWF0aCIsInJhbmRvbSIsInBhcnNlSW50Iiwib2JqIiwicXVlcnlBcnIiLCJrZXlzIiwiZm9yRWFjaCIsInBhcmFtIiwicHVzaCIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsImNhbnZhc1dpZHRoIiwic2NhbGVGYWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsImltYWdlU2l6ZXMiLCJ4IiwieSIsIkNhbnZhc1Rvb2xzIiwiY2FudmFzIiwidGhpcyIsImNhbnZhc1Rvb2xzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9vbHNBY3Rpb25zIiwicGFpbnRCdWNrZXQiLCJwZW5jaWwiLCJjb2xvclBpY2tlciIsImtleUJpbmRpbmdzQ29kZXMiLCJrZXlCaW5kaW5nc1Rvb2xzIiwiS2V5QiIsIktleUMiLCJLZXlQIiwiY3VycmVudFRvb2wiLCJjYW52YXNOb2RlIiwiY2xhc3NMaXN0IiwiYWRkIiwiZWxlbSIsInJlbW92ZSIsInRvb2xJdGVtIiwicmVtb3ZlVG9vbHNBY3RpdmVDbGFzcyIsInRvb2wiLCJkYXRhc2V0Iiwic2F2ZUNhbnZhc1N0YXRlIiwiY2xlYXJDYW52YXMiLCJpbmNsdWRlcyIsImNvZGUiLCJxdWVyeVNlbGVjdG9yIiwiY2xpY2siLCJhY3Rpb24iLCJhZGRFdmVudExpc3RlbmVyIiwibWFuYWdlS2V5QmluZGluZ3MiLCJzZXRFdmVudHMiLCJDb2xvclRvb2xzIiwiY3VycmVuQ29sb3JGaWVsZCIsImdldEVsZW1lbnRCeUlkIiwiY3VycmVudENvbG9ySWNvbiIsInByZXZDb2xvckljb24iLCJjdXJyZW50Q29sb3IiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwicHJldkNvbG9yIiwiY29sb3JDaGFuZ2VFbGVtcyIsImNoYW5nZUN1cnJlbnRDb2xvciIsInNldENvbG9ycyIsInRhcmdldCIsInNldFByZXZDb2xvciIsInNldEN1cnJlbnRDb2xvciIsInN0eWxlIiwiaWNvbiIsIkNhbnZhc1NpemVTd2l0Y2hlciIsImNhbnZhc0NoYW5nZUVsZW1zIiwiY29udGFpbnMiLCJjaGFuZ2VDYW52YXNTaXplIiwiZWxlbUNsYXNzZXMiLCJwaXhlbHMiLCJBQ0NFU1NfS0VZIiwiVU5TUExBU0hfQVBJX1VSTCIsIkh0dHBDbGllbnQiLCJiYXNlVXJsIiwicGF0aCIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJzdGF0dXMiLCJqc29uIiwiaHR0cENsaWVudCIsIl9jb25maWciLCJhcGlLZXkiLCJwYXJhbXMiLCJvYmplY3RUb1F1ZXJ5Iiwic2VhcmNoU3RyaW5nIiwicXVlcnkiLCJwcmVwYXJlUXVlcnkiLCJodHRwR2V0IiwidW5zcGxhc2hTZXJ2aWNlIiwiZm9ybSIsInNlYWNoRmllbGQiLCJlcnJvck1lc3NhZ2VOb2RlIiwic2VhcmNoU3VibWl0QnV0dG9uIiwiaXNJblByb2dyZXNzIiwiZXJyb3JNZXNzYWdlcyIsImVtcHR5RmllbGQiLCJub3RGb3VuZCIsInRyaW0iLCJzaG93RXJyb3JNZXNzYWdlIiwiaW5uZXJUZXh0IiwiZGlzYWJsZWQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFByb2dyZXNzU3RhdGUiLCJ2YWxpZGF0ZUZvcm0iLCJzZWFyY2hQaG90b3MiLCJ0b3RhbCIsImNhbnZhc0ltYWdlIiwicmVzdWx0cyIsInJhbmRvbUludGVnZXIiLCJ1cmxzIiwic2VhcmNoSW1hZ2UiLCJjYW52YXNJZCIsImNvbG9yVG9vbHMiLCJjYW52YXNTaXplU3dpdGNoZXIiLCJjdHgiLCJnZXRDb250ZXh0IiwiaXNQZW5jaWxEcmF3U3RhcnQiLCJwZW5jaWxYIiwicGVuY2lsWSIsImV2ZW50c1R5cGVzIiwibW91c2Vkb3duIiwibW91c2V1cCIsIm1vdXNlbW92ZSIsInNob3dNZXNzYWdlIiwibG9hZEltYWdlIiwicmVndWxhciIsImdyYXlzY2FsZUJ0biIsIm1hbmFnZUNhbnZhc0FjdGlvbnMiLCJncmF5c2NhbGVJbWFnZSIsInJlc2V0VG9vbHMiLCJjbGVhclJlY3QiLCJ0b29sQWN0aW9uIiwidHlwZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY29vcmRpbmF0ZXMiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsImRyYXdQaXhlbCIsImRyYXdMaW5lIiwieDAiLCJ5MCIsIngxIiwieTEiLCJhYnMiLCJkcmF3TGluZUxvdyIsImRyYXdMaW5lSGlnaCIsImRlbHRhWCIsImRlbHRhWSIsImRpciIsImRpZmYiLCJwaXhlbFNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZmxvb3IiLCJsZWZ0IiwidG9wIiwiZ2V0SW1hZ2VEYXRhIiwiZGF0YSIsImdldENvbG9yIiwiaW1hZ2UiLCJpbWFnZVNpemUiLCJnZXRJbWFnZVNpemVzIiwicG9zaXRpb24iLCJnZXRJbWFnZVBvc2l0aW9uIiwiZHJhd0ltYWdlIiwiZ2V0UG9pbnRlZENvbG9yIiwic2V0Q3VycmVudEljb25Db2xvciIsImltYWdlRGF0YSIsImV2ZXJ5IiwiYXZnIiwicHV0SW1hZ2VEYXRhIiwiaW1hZ2VTcmMiLCJJbWFnZSIsInNyYyIsImNyb3NzT3JpZ2luIiwib25sb2FkIiwidG9EYXRhVVJMIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJhbXNTdHIiLCJnZXRJdGVtIiwicGFyc2UiLCJpbml0IiwiZ2V0Q2FudmFzU3RhdGUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFF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QUtvRyxXQUFXckQsYUFBYXVCLEVBQU81QixXQUd0QzFDLEtBQUtnSCxVQUFVMUMsRUFBTzJGLFVBQ3RCLE1BQU8zTCxHQUNQRSxNQUFNLGtFQUtaLE9BQ0V3QixLQUFLa0csWUFBWTRFLE9BQ2pCOUssS0FBS0MsWUFBWTZLLE9BQ2pCOUssS0FBS29HLFdBQVcwRSxPQUNoQjlLLEtBQUtxRyxtQkFBbUJ5RSxPQUN4QjlLLEtBQUsrSyxpQkFDTC9LLEtBQUtnQyxhQy9SVDlCLFNBQVM0QixpQkFBaUIsb0JBTDFCLFdBQ2tCLElBQUksRUFBTyxXQUNuQmdKLFciLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBlcnMge1xyXG4gIHN0YXRpYyBnZXRDb2xvcihjb2xvcikge1xyXG4gICAgY29uc3QgZGVmYXVsdENvbG9yID0gJyMwMDAnO1xyXG5cclxuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBgIyR7Y29sb3J9YDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmdiYUNvbG9yID0gWy4uLmNvbG9yXTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICByZ2JhQ29sb3JbM10gPSByZ2JhQ29sb3IubGVuZ3RoID09PSA0ID8gKHJnYmFDb2xvclszXSAvIDI1NSkudG9GaXhlZCgyKSA6IDE7XHJcbiAgICAgIHJnYmFDb2xvciA9IGByZ2JhKCR7cmdiYUNvbG9yLmpvaW4oJywnKX0pYDtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmdiYUNvbG9yO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNob3dNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgIGFsZXJ0KG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJhbmRvbUludGVnZXIobWluLCBtYXgpIHtcclxuICAgIGxldCByYW5kID0gbWluICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pO1xyXG4gICAgcmFuZCA9IHBhcnNlSW50KHJhbmQsIDEwKTtcclxuICAgIHJldHVybiByYW5kO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG9iamVjdFRvUXVlcnkob2JqKSB7XHJcbiAgICBjb25zdCBxdWVyeUFyciA9IFtdO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgocGFyYW0pID0+IHtcclxuICAgICAgcXVlcnlBcnIucHVzaChgJHtwYXJhbX09JHtvYmpbcGFyYW1dfWApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHF1ZXJ5QXJyLmpvaW4oJyYnKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRJbWFnZVNpemVzKGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0LCBjYW52YXNXaWR0aCkge1xyXG4gICAgY29uc3Qgc2NhbGVGYWN0b3IgPSBpbWFnZVdpZHRoID4gaW1hZ2VIZWlnaHQgPyBjYW52YXNXaWR0aCAvIGltYWdlV2lkdGggOiBjYW52YXNXaWR0aCAvIGltYWdlSGVpZ2h0O1xyXG5cclxuICAgIGNvbnN0IHNpemUgPSB7XHJcbiAgICAgIHdpZHRoOiBpbWFnZVdpZHRoICogc2NhbGVGYWN0b3IsXHJcbiAgICAgIGhlaWdodDogaW1hZ2VIZWlnaHQgKiBzY2FsZUZhY3RvcixcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW1hZ2VQb3NpdGlvbihpbWFnZVNpemVzLCBjYW52YXNXaWR0aCkge1xyXG4gICAgaWYgKGltYWdlU2l6ZXMud2lkdGggPiBpbWFnZVNpemVzLmhlaWdodCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogKGNhbnZhc1dpZHRoIC0gaW1hZ2VTaXplcy5oZWlnaHQpIC8gMixcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IChjYW52YXNXaWR0aCAtIGltYWdlU2l6ZXMud2lkdGgpIC8gMixcclxuICAgICAgeTogMCxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhc1Rvb2xzIHtcclxuICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcclxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgdGhpcy5jYW52YXNUb29scyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFjdGlvbl0nKTtcclxuXHJcbiAgICB0aGlzLnRvb2xzQWN0aW9ucyA9IHtcclxuICAgICAgcGFpbnRCdWNrZXQ6ICdmaWxsQXJlYScsXHJcbiAgICAgIHBlbmNpbDogJ2RyYXdCeVBlbmNpbCcsXHJcbiAgICAgIGNvbG9yUGlja2VyOiAnY2hvb3NlQ29sb3InLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmtleUJpbmRpbmdzQ29kZXMgPSBbJ0tleUInLCAnS2V5UCcsICdLZXlDJ107XHJcblxyXG4gICAgdGhpcy5rZXlCaW5kaW5nc1Rvb2xzID0ge1xyXG4gICAgICBLZXlCOiAncGFpbnRCdWNrZXQnLFxyXG4gICAgICBLZXlDOiAnY29sb3JQaWNrZXInLFxyXG4gICAgICBLZXlQOiAncGVuY2lsJyxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jdXJyZW50VG9vbCA9ICdwZW5jaWwnO1xyXG5cclxuICAgIHRoaXMuY2FudmFzLmNhbnZhc05vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLmN1cnJlbnRUb29sKTtcclxuICB9XHJcblxyXG4gIGdldCB0b29sQWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudG9vbHNBY3Rpb25zW3RoaXMuY3VycmVudFRvb2xdO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVG9vbHNBY3RpdmVDbGFzcygpIHtcclxuICAgIHRoaXMuY2FudmFzVG9vbHMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRUb29sKHRvb2xJdGVtKSB7XHJcbiAgICB0aGlzLnJlbW92ZVRvb2xzQWN0aXZlQ2xhc3MoKTtcclxuICAgIHRvb2xJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cclxuICAgIGNvbnN0IHsgdG9vbCB9ID0gdG9vbEl0ZW0uZGF0YXNldDtcclxuICAgIHRoaXMuY2FudmFzLmNhbnZhc05vZGUuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmN1cnJlbnRUb29sKTtcclxuICAgIHRoaXMuY3VycmVudFRvb2wgPSB0b29sO1xyXG4gICAgdGhpcy5jYW52YXMuY2FudmFzTm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMuY3VycmVudFRvb2wpO1xyXG4gICAgdGhpcy5jYW52YXMuc2F2ZUNhbnZhc1N0YXRlKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhckNhbnZhcygpIHtcclxuICAgIHRoaXMuY2FudmFzLmNsZWFyQ2FudmFzKCk7XHJcbiAgfVxyXG5cclxuICBtYW5hZ2VLZXlCaW5kaW5ncyhlKSB7XHJcbiAgICBpZiAodGhpcy5rZXlCaW5kaW5nc0NvZGVzLmluY2x1ZGVzKGUuY29kZSkpIHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdG9vbD1cIiR7dGhpcy5rZXlCaW5kaW5nc1Rvb2xzW2UuY29kZV19XCJdYCkuY2xpY2soKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50cygpIHtcclxuICAgIHRoaXMuY2FudmFzVG9vbHMuZm9yRWFjaCgodG9vbEl0ZW0pID0+IHtcclxuICAgICAgY29uc3QgeyBhY3Rpb24gfSA9IHRvb2xJdGVtLmRhdGFzZXQ7XHJcblxyXG4gICAgICB0b29sSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXNbYWN0aW9uXS5iaW5kKHRoaXMsIHRvb2xJdGVtKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMubWFuYWdlS2V5QmluZGluZ3MuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy5zZXRFdmVudHMoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JUb29scyB7XHJcbiAgY29uc3RydWN0b3IoY2FudmFzKSB7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuXHJcbiAgICB0aGlzLmN1cnJlbkNvbG9yRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudF9jb2xvcicpO1xyXG4gICAgdGhpcy5jdXJyZW50Q29sb3JJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmljb25fY29sb3ItLWN1cnJlbnQtY29sb3InKTtcclxuICAgIHRoaXMucHJldkNvbG9ySWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pY29uX2NvbG9yLS1wcmV2X2NvbG9yJyk7XHJcbiAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY3VycmVudENvbG9ySWNvbikuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgdGhpcy5wcmV2Q29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnByZXZDb2xvckljb24pLmJhY2tncm91bmRDb2xvcjtcclxuICAgIHRoaXMuY29sb3JDaGFuZ2VFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pdGVtLS1jb2xvcl9jaGFuZ2UnKTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50cygpIHtcclxuICAgIHRoaXMuY3VycmVuQ29sb3JGaWVsZC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmNoYW5nZUN1cnJlbnRDb2xvci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLmNvbG9yQ2hhbmdlRWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zZXRDb2xvcnMuYmluZCh0aGlzLCBlbGVtKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoYW5nZUN1cnJlbnRDb2xvcihlKSB7XHJcbiAgICBjb25zdCBmaWVsZCA9IGUudGFyZ2V0O1xyXG4gICAgY29uc3QgY29sb3IgPSBmaWVsZC52YWx1ZTtcclxuICAgIHRoaXMuc2V0UHJldkNvbG9yKHRoaXMuY3VycmVudENvbG9yKTtcclxuICAgIHRoaXMuc2V0Q3VycmVudENvbG9yKGNvbG9yKTtcclxuICB9XHJcblxyXG4gIHNldEN1cnJlbnRDb2xvcihjb2xvcikge1xyXG4gICAgdGhpcy5jdXJyZW50Q29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuY3VycmVudENvbG9ySWNvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuY2FudmFzLnNhdmVDYW52YXNTdGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0UHJldkNvbG9yKGNvbG9yKSB7XHJcbiAgICB0aGlzLnByZXZDb2xvciA9IGNvbG9yO1xyXG4gICAgdGhpcy5wcmV2Q29sb3JJY29uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29sb3JzKGVsZW0pIHtcclxuICAgIGNvbnN0IGljb24gPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoJy5pY29uX2NvbG9yJyk7XHJcbiAgICBjb25zdCBjb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGljb24pLmJhY2tncm91bmRDb2xvcjtcclxuICAgIHRoaXMuc2V0UHJldkNvbG9yKHRoaXMuY3VycmVudENvbG9yKTtcclxuICAgIHRoaXMuc2V0Q3VycmVudENvbG9yKGNvbG9yKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnNldEV2ZW50cygpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXNTaXplU3dpdGNoZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNhbnZhcykge1xyXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcblxyXG4gICAgdGhpcy5jYW52YXNDaGFuZ2VFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYW52YXNfY2hhbmdlJyk7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudHMoKSB7XHJcbiAgICB0aGlzLmNhbnZhc0NoYW5nZUVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgY29uc3QgZWxlbUNsYXNzZXMgPSBlbGVtLmNsYXNzTGlzdDtcclxuXHJcbiAgICAgIGlmIChlbGVtQ2xhc3Nlcy5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZUNhbnZhc1NpemUuYmluZChlbGVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2hhbmdlQ2FudmFzU2l6ZS5iaW5kKHRoaXMsIGVsZW0pKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlQ2FudmFzU2l6ZShlbGVtKSB7XHJcbiAgICBjb25zdCBlbGVtQ2xhc3NlcyA9IGVsZW0uY2xhc3NMaXN0O1xyXG5cclxuICAgIGlmIChlbGVtQ2xhc3Nlcy5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFjdGl2ZUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzX2NoYW5nZS5hY3RpdmUnKTtcclxuICAgIGFjdGl2ZUVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICBlbGVtQ2xhc3Nlcy5hZGQoJ2FjdGl2ZScpO1xyXG5cclxuICAgIHRoaXMuY2FudmFzLnBpeGVscyA9IGVsZW0uZGF0YXNldC5waXhlbHM7XHJcbiAgICB0aGlzLmNhbnZhcy5zYXZlQ2FudmFzU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnNldEV2ZW50cygpO1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBjb25maWcgPSB7XG4gIEFDQ0VTU19LRVk6ICcwZWM5YWQ4YzJjNmE4ZjU0ZmNhOTQyOWYxMmU0ZDNmMjRjY2NhYzlhN2EwZmRlOTFiZjFiYjg4MTdiMzEzNGZmJyxcbiAgVU5TUExBU0hfQVBJX1VSTDogJ2h0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS8nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHR0cENsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGJhc2VVcmwpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG5cbiAgYXN5bmMgaHR0cEdldChwYXRoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7cGF0aH1gO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgLy8gVG9Eb1xuICAgIH1cblxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7IC8vINGH0LjRgtCw0LXQvCDQvtGC0LLQtdGCINCyINGE0L7RgNC80LDRgtC1IEpTT05cblxuICAgIHJldHVybiBqc29uO1xuICB9XG59XG4iLCJpbXBvcnQgX2NvbmZpZyBmcm9tICcuL19jb25maWcnO1xuaW1wb3J0IEhlbHBlcnMgZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBIdHRwQ2xpZW50IGZyb20gJy4vaHR0cENsaWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuc3BsYXNoU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaHR0cENsaWVudCA9IG5ldyBIdHRwQ2xpZW50KF9jb25maWcuVU5TUExBU0hfQVBJX1VSTCk7XG4gICAgdGhpcy5hcGlLZXkgPSBfY29uZmlnLkFDQ0VTU19LRVk7XG4gIH1cblxuICBwcmVwYXJlUXVlcnkocGFyYW1zKSB7XG4gICAgcmV0dXJuIGAke0hlbHBlcnMub2JqZWN0VG9RdWVyeShwYXJhbXMpfSZjbGllbnRfaWQ9JHt0aGlzLmFwaUtleX1gO1xuICB9XG5cbiAgYXN5bmMgc2VhcmNoUGhvdG9zKHNlYXJjaFN0cmluZykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5wcmVwYXJlUXVlcnkoeyBxdWVyeTogc2VhcmNoU3RyaW5nIH0pO1xuICAgIGNvbnN0IHBob3RvcyA9IGF3YWl0IHRoaXMuaHR0cENsaWVudC5odHRwR2V0KGAvc2VhcmNoL3Bob3Rvcz8ke3F1ZXJ5fWApO1xuXG4gICAgcmV0dXJuIHBob3RvcztcbiAgfVxufVxuIiwiaW1wb3J0IFVuc3BsYXNoU2VydmljZSBmcm9tICcuL3Vuc3BsYXNoU2VydmljZSc7XG5pbXBvcnQgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hJbWFnZSB7XG4gIGNvbnN0cnVjdG9yKGNhbnZhcykge1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMudW5zcGxhc2hTZXJ2aWNlID0gbmV3IFVuc3BsYXNoU2VydmljZSgpO1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hfaW1hZ2VfZm9ybScpO1xuICAgIHRoaXMuc2VhY2hGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hfaW1hZ2VfZmllbGQnKTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZU5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoX2ltYWdlX2Vycm9ycycpO1xuICAgIHRoaXMuc2VhcmNoU3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaF9zdWJtaXRfYnV0dG9uJyk7XG4gICAgdGhpcy5pc0luUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIHRoaXMuZXJyb3JNZXNzYWdlcyA9IHtcbiAgICAgIGVtcHR5RmllbGQ6ICdQbGVhc2UgZW50ZXIgYSBzZWFyY2hpbmcgc3RyaW5nLicsXG4gICAgICBub3RGb3VuZDogJ05vdGhpbmcgd2FzIGZvdW5kLiBQbGVhc2UgdHJ5IGFub3RoZXIgdmFsdWUnLFxuICAgIH07XG4gIH1cblxuICB2YWxpZGF0ZUZvcm0oKSB7XG4gICAgaWYgKCF0aGlzLnNlYWNoRmllbGQudmFsdWUudHJpbSgpKSB7XG4gICAgICB0aGlzLnNob3dFcnJvck1lc3NhZ2UodGhpcy5lcnJvck1lc3NhZ2VzLmVtcHR5RmllbGQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc2hvd0Vycm9yTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VOb2RlLmlubmVyVGV4dCA9IG1lc3NhZ2U7XG4gIH1cblxuICBzZXRQcm9ncmVzc1N0YXRlKGlzSW5Qcm9ncmVzcykge1xuICAgIGlmIChpc0luUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMuaXNJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2VhcmNoU3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKCdpbl9wcm9ncmVzcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5zZWFyY2hTdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdpbl9wcm9ncmVzcycpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlYXJjaEltYWdlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5pc0luUHJvZ3Jlc3MpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFByb2dyZXNzU3RhdGUodHJ1ZSk7XG5cbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy52YWxpZGF0ZUZvcm0oKTtcblxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgdGhpcy5zZXRQcm9ncmVzc1N0YXRlKGZhbHNlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnNlYWNoRmllbGQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnVuc3BsYXNoU2VydmljZS5zZWFyY2hQaG90b3ModmFsdWUpO1xuXG4gICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UudG90YWwpIHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yTWVzc2FnZSh0aGlzLmVycm9yTWVzc2FnZXMubm90Rm91bmQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc2V0UHJvZ3Jlc3NTdGF0ZShmYWxzZSk7XG5cbiAgICB0aGlzLmNhbnZhcy5jYW52YXNJbWFnZSA9IHJlc3BvbnNlLnJlc3VsdHNbSGVscGVycy5yYW5kb21JbnRlZ2VyKDAsIDEwKV0udXJsczsgLy8gVG9Eb1xuICB9XG5cbiAgc2V0RXZlbnRzKCkge1xuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNlYXJjaEltYWdlLmJpbmQodGhpcykpO1xuICB9XG5cblxuICBpbml0KCkge1xuICAgIHRoaXMuc2V0RXZlbnRzKCk7XG4gIH1cbn1cbiIsImltcG9ydCBIZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XHJcbmltcG9ydCBDYW52YXNUb29scyBmcm9tICcuL2NhbnZhc1Rvb2xzJztcclxuaW1wb3J0IENvbG9yVG9vbHMgZnJvbSAnLi9jb2xvclRvb2xzJztcclxuaW1wb3J0IENhbnZhc1NpemVTd2l0Y2hlciBmcm9tICcuL2NhbnZhc1NpemVTd2l0Y2hlcic7XHJcbmltcG9ydCBTZWFyY2hJbWFnZSBmcm9tICcuL3NlYXJjaEltYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XHJcbiAgY29uc3RydWN0b3IoY2FudmFzSWQpIHtcclxuICAgIGlmICghY2FudmFzSWQpIHtcclxuICAgICAgSGVscGVycy5zaG93TWVzc2FnZSgnRXJyb3I6IGNhbnZhc0lkIGlzIG5vdCBzZXQuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNhbnZhc0lkID0gY2FudmFzSWQ7XHJcbiAgICB0aGlzLmNhbnZhc05vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNhbnZhc0lkKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuY2FudmFzTm9kZSkge1xyXG4gICAgICBIZWxwZXJzLnNob3dNZXNzYWdlKGBFcnJvcjogY2FudmFzIGVsZW1lbnQgd2l0aCBpZCAke2NhbnZhc0lkfSB3YXMgbm90IGZvdW5kLmApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZWFyY2hJbWFnZSA9IG5ldyBTZWFyY2hJbWFnZSh0aGlzKTtcclxuICAgIHRoaXMuY2FudmFzVG9vbHMgPSBuZXcgQ2FudmFzVG9vbHModGhpcyk7XHJcbiAgICB0aGlzLmNvbG9yVG9vbHMgPSBuZXcgQ29sb3JUb29scyh0aGlzKTtcclxuICAgIHRoaXMuY2FudmFzU2l6ZVN3aXRjaGVyID0gbmV3IENhbnZhc1NpemVTd2l0Y2hlcih0aGlzKTtcclxuXHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXNOb2RlLndpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbnZhc05vZGUuaGVpZ2h0O1xyXG4gICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhc05vZGUuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHRoaXMucGl4ZWxzID0gMTI4O1xyXG5cclxuICAgIHRoaXMuaXNQZW5jaWxEcmF3U3RhcnQgPSBmYWxzZTtcclxuICAgIHRoaXMucGVuY2lsWCA9IDA7XHJcbiAgICB0aGlzLnBlbmNpbFkgPSAwO1xyXG5cclxuICAgIHRoaXMuZXZlbnRzVHlwZXMgPSB7XHJcbiAgICAgIG1vdXNlZG93bjogJ21vdXNlZG93bicsXHJcbiAgICAgIG1vdXNldXA6ICdtb3VzZXVwJyxcclxuICAgICAgbW91c2Vtb3ZlOiAnbW91c2Vtb3ZlJyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXQgcGl4ZWxTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLnBpeGVscztcclxuICB9XHJcblxyXG4gIHNldCBjYW52YXNJbWFnZShjYW52YXNJbWFnZSkge1xyXG4gICAgdGhpcy5sb2FkSW1hZ2UoY2FudmFzSW1hZ2UucmVndWxhcik7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudHMoKSB7XHJcbiAgICBjb25zdCBncmF5c2NhbGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ3JheXNjYWxlX2J1dHRvbicpO1xyXG5cclxuICAgIHRoaXMuY2FudmFzTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm1hbmFnZUNhbnZhc0FjdGlvbnMuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLmNhbnZhc05vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubWFuYWdlQ2FudmFzQWN0aW9ucy5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuY2FudmFzTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1hbmFnZUNhbnZhc0FjdGlvbnMuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgZ3JheXNjYWxlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5ncmF5c2NhbGVJbWFnZS5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGNsZWFyQ2FudmFzKCkge1xyXG4gICAgdGhpcy5yZXNldFRvb2xzKCk7XHJcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgdGhpcy5zYXZlQ2FudmFzU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIG1hbmFnZUNhbnZhc0FjdGlvbnMoZSkge1xyXG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5jYW52YXNUb29scy50b29sQWN0aW9uO1xyXG5cclxuICAgIGlmIChhY3Rpb24pIHtcclxuICAgICAgdGhpc1thY3Rpb25dKGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXRUb29scygpIHtcclxuICAgIHRoaXMuaXNQZW5jaWxEcmF3U3RhcnQgPSBmYWxzZTtcclxuICAgIHRoaXMucGVuY2lsWCA9IDA7XHJcbiAgICB0aGlzLnBlbmNpbFkgPSAwO1xyXG4gIH1cclxuXHJcbiAgZmlsbEFyZWEoZSkge1xyXG4gICAgaWYgKGUudHlwZSA9PT0gdGhpcy5ldmVudHNUeXBlcy5tb3VzZWRvd24pIHtcclxuICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvclRvb2xzLmN1cnJlbnRDb2xvcjtcclxuICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cclxuICAgICAgdGhpcy5zYXZlQ2FudmFzU3RhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdCeVBlbmNpbChlKSB7XHJcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IHRoaXMuZ2V0UG9pbnRlclBvc2l0aW9uKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuXHJcbiAgICBpZiAoZS50eXBlID09PSB0aGlzLmV2ZW50c1R5cGVzLm1vdXNlZG93bikge1xyXG4gICAgICB0aGlzLmlzUGVuY2lsRHJhd1N0YXJ0ID0gdHJ1ZTtcclxuICAgICAgdGhpcy5kcmF3UGl4ZWwoY29vcmRpbmF0ZXMpO1xyXG4gICAgICB0aGlzLnBlbmNpbFggPSBjb29yZGluYXRlcy54O1xyXG4gICAgICB0aGlzLnBlbmNpbFkgPSBjb29yZGluYXRlcy55O1xyXG4gICAgICB0aGlzLnNhdmVDYW52YXNTdGF0ZSgpO1xyXG4gICAgfSBlbHNlIGlmIChlLnR5cGUgPT09IHRoaXMuZXZlbnRzVHlwZXMubW91c2Vtb3ZlICYmIHRoaXMuaXNQZW5jaWxEcmF3U3RhcnQpIHtcclxuICAgICAgdGhpcy5kcmF3TGluZSh0aGlzLnBlbmNpbFgsIHRoaXMucGVuY2lsWSwgY29vcmRpbmF0ZXMueCwgY29vcmRpbmF0ZXMueSk7XHJcbiAgICAgIHRoaXMuc2F2ZUNhbnZhc1N0YXRlKCk7XHJcbiAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gdGhpcy5ldmVudHNUeXBlcy5tb3VzZXVwKSB7XHJcbiAgICAgIHRoaXMuaXNQZW5jaWxEcmF3U3RhcnQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdMaW5lKHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICBpZiAoTWF0aC5hYnMoeTEgLSB5MCkgPCBNYXRoLmFicyh4MSAtIHgwKSkge1xyXG4gICAgICBpZiAoeDAgPiB4MSkge1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmVMb3coeDEsIHkxLCB4MCwgeTApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmVMb3coeDAsIHkwLCB4MSwgeTEpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2VcclxuICAgIGlmICh5MCA+IHkxKSB7XHJcbiAgICAgIHRoaXMuZHJhd0xpbmVIaWdoKHgxLCB5MSwgeDAsIHkwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZHJhd0xpbmVIaWdoKHgwLCB5MCwgeDEsIHkxKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBlbmNpbFggPSB4MTtcclxuICAgIHRoaXMucGVuY2lsWSA9IHkxO1xyXG4gIH1cclxuXHJcbiAgZHJhd0xpbmVMb3coeDAsIHkwLCB4MSwgeTEpIHtcclxuICAgIGNvbnN0IGRlbHRhWCA9IHgxIC0geDA7XHJcbiAgICBsZXQgZGVsdGFZID0geTEgLSB5MDtcclxuICAgIGxldCBkaXIgPSAxO1xyXG4gICAgaWYgKGRlbHRhWSA8IDApIHtcclxuICAgICAgZGlyID0gLTE7XHJcbiAgICAgIGRlbHRhWSA9IC1kZWx0YVk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGRpZmYgPSAyICogZGVsdGFZIC0gZGVsdGFYO1xyXG4gICAgbGV0IHkgPSB5MDtcclxuXHJcbiAgICBmb3IgKGxldCB4ID0geDA7IHggPD0geDE7IHggKz0gMSkge1xyXG4gICAgICB0aGlzLmRyYXdQaXhlbCh7IHgsIHkgfSk7XHJcbiAgICAgIGlmIChkaWZmID4gMCkge1xyXG4gICAgICAgIHkgKz0gZGlyO1xyXG4gICAgICAgIGRpZmYgLT0gMiAqIGRlbHRhWDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGlmZiArPSAyICogZGVsdGFZO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd0xpbmVIaWdoKHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICBsZXQgZGVsdGFYID0geDEgLSB4MDtcclxuICAgIGNvbnN0IGRlbHRhWSA9IHkxIC0geTA7XHJcblxyXG4gICAgbGV0IGRpciA9IDE7XHJcbiAgICBpZiAoZGVsdGFYIDwgMCkge1xyXG4gICAgICBkaXIgPSAtMTtcclxuICAgICAgZGVsdGFYID0gLWRlbHRhWDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZGlmZiA9IDIgKiBkZWx0YVggLSBkZWx0YVk7XHJcbiAgICBsZXQgeCA9IHgwO1xyXG5cclxuICAgIGZvciAobGV0IHkgPSB5MDsgeSA8PSB5MTsgeSArPSAxKSB7XHJcbiAgICAgIHRoaXMuZHJhd1BpeGVsKHsgeCwgeSB9KTtcclxuICAgICAgaWYgKGRpZmYgPiAwKSB7XHJcbiAgICAgICAgeCArPSBkaXI7XHJcbiAgICAgICAgZGlmZiAtPSAyICogZGVsdGFZO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkaWZmICs9IDIgKiBkZWx0YVg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3UGl4ZWwoY29vcmRpbmF0ZXMpIHtcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3JUb29scy5jdXJyZW50Q29sb3I7XHJcbiAgICB0aGlzLmN0eC5maWxsUmVjdChcclxuICAgICAgY29vcmRpbmF0ZXMueCAqIHRoaXMucGl4ZWxTaXplLFxyXG4gICAgICBjb29yZGluYXRlcy55ICogdGhpcy5waXhlbFNpemUsXHJcbiAgICAgIHRoaXMucGl4ZWxTaXplLFxyXG4gICAgICB0aGlzLnBpeGVsU2l6ZSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludGVyUG9zaXRpb24oY2xpZW50WCwgY2xpZW50WSkge1xyXG4gICAgY29uc3QgcmVjdCA9IHRoaXMuY2FudmFzTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKChjbGllbnRYIC0gcmVjdC5sZWZ0KSAvIHRoaXMucGl4ZWxTaXplKTtcclxuICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKChjbGllbnRZIC0gcmVjdC50b3ApIC8gdGhpcy5waXhlbFNpemUpO1xyXG5cclxuICAgIHJldHVybiB7IHgsIHkgfTtcclxuICB9XHJcblxyXG4gIGdldFBvaW50ZWRDb2xvcihjbGllbnRYLCBjbGllbnRZKSB7XHJcbiAgICBjb25zdCByZWN0ID0gdGhpcy5jYW52YXNOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgeCA9IGNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICBjb25zdCB5ID0gY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgbGV0IGNvbG9yID0gdGhpcy5jdHguZ2V0SW1hZ2VEYXRhKHgsIHksIDEsIDEpLmRhdGE7XHJcbiAgICBjb2xvciA9IEhlbHBlcnMuZ2V0Q29sb3IoY29sb3IpO1xyXG5cclxuICAgIHJldHVybiBjb2xvcjtcclxuICB9XHJcblxyXG4gIGRyYXdJbWFnZShpbWFnZSkge1xyXG4gICAgdGhpcy5jbGVhckNhbnZhcygpO1xyXG4gICAgY29uc3QgaW1hZ2VTaXplID0gSGVscGVycy5nZXRJbWFnZVNpemVzKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIHRoaXMud2lkdGgpO1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBIZWxwZXJzLmdldEltYWdlUG9zaXRpb24oaW1hZ2VTaXplLCB0aGlzLndpZHRoKTtcclxuICAgIHRoaXMuY3R4LmRyYXdJbWFnZShpbWFnZSwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgaW1hZ2VTaXplLndpZHRoLCBpbWFnZVNpemUuaGVpZ2h0KTtcclxuICAgIHRoaXMuc2F2ZUNhbnZhc1N0YXRlKCk7XHJcbiAgfVxyXG5cclxuICBjaG9vc2VDb2xvcihlKSB7XHJcbiAgICBpZiAoZS50eXBlID09PSB0aGlzLmV2ZW50c1R5cGVzLm1vdXNlZG93bikge1xyXG4gICAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0UG9pbnRlZENvbG9yKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgICAgdGhpcy5jb2xvclRvb2xzLnNldFByZXZDb2xvcih0aGlzLmNvbG9yVG9vbHMuY3VycmVudENvbG9yKTtcclxuICAgICAgdGhpcy5jb2xvclRvb2xzLmN1cnJlbnRDb2xvciA9IGNvbG9yO1xyXG4gICAgICB0aGlzLmNvbG9yVG9vbHMuY3VycmVuQ29sb3JGaWVsZC52YWx1ZSA9IGNvbG9yO1xyXG4gICAgICB0aGlzLmNvbG9yVG9vbHMuc2V0Q3VycmVudEljb25Db2xvcih0aGlzLmNvbG9yVG9vbHMuY3VycmVuQ29sb3JGaWVsZCwgY29sb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ3JheXNjYWxlSW1hZ2UoKSB7XHJcbiAgICBjb25zdCBpbWFnZURhdGEgPSB0aGlzLmN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgY29uc3QgeyBkYXRhIH0gPSBpbWFnZURhdGE7XHJcblxyXG4gICAgaWYgKGRhdGEuZXZlcnkoKG4pID0+IG4gPT09IDApKSB7XHJcbiAgICAgIEhlbHBlcnMuc2hvd01lc3NhZ2UoJ1RoZSBjYW52YXMgaXMgZW1wdHkuIFBsZWFzZSBkcmF3IHNvbWV0aGluZyBvciBsb2FkIGFuIGltYWdlIGJlZm9yZSBhcHBseSBncmF5c2NhbGUuJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgY29uc3QgYXZnID0gKGRhdGFbaV0gKyBkYXRhW2kgKyAxXSArIGRhdGFbaSArIDJdKSAvIDM7XHJcbiAgICAgIGRhdGFbaV0gPSBhdmc7IC8vIHJlZFxyXG4gICAgICBkYXRhW2kgKyAxXSA9IGF2ZzsgLy8gZ3JlZW5cclxuICAgICAgZGF0YVtpICsgMl0gPSBhdmc7IC8vIGJsdWVcclxuICAgIH1cclxuICAgIHRoaXMuY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xyXG4gICAgdGhpcy5zYXZlQ2FudmFzU3RhdGUoKTtcclxuICB9XHJcblxyXG4gIGxvYWRJbWFnZShpbWFnZVNyYykge1xyXG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGltYWdlLnNyYyA9IGltYWdlU3JjO1xyXG4gICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcclxuICAgIGltYWdlLm9ubG9hZCA9IHRoaXMuZHJhd0ltYWdlLmJpbmQodGhpcywgaW1hZ2UpO1xyXG4gIH1cclxuXHJcbiAgc2F2ZUNhbnZhc1N0YXRlKCkge1xyXG4gICAgY29uc3QgcGFyYW1zID0ge1xyXG4gICAgICBpbWFnZVNyYzogdGhpcy5jYW52YXNOb2RlLnRvRGF0YVVSTCgpLFxyXG4gICAgICBwaXhlbHM6IHRoaXMucGl4ZWxzLFxyXG4gICAgICBjdXJyZW50VG9vbDogdGhpcy5jYW52YXNUb29scy5jdXJyZW50VG9vbCxcclxuICAgICAgY3VycmVudENvbG9yOiB0aGlzLmNvbG9yVG9vbHMuY3VycmVudENvbG9yLFxyXG4gICAgICBwcmV2Q29sb3I6IHRoaXMuY29sb3JUb29scy5wcmV2Q29sb3IgfHwgJ3RzJyxcclxuICAgIH07XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmNhbnZhc0lkLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcclxuICB9XHJcblxyXG4gIGdldENhbnZhc1N0YXRlKCkge1xyXG4gICAgY29uc3QgcGFyYW1zU3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jYW52YXNJZCk7XHJcblxyXG4gICAgaWYgKHBhcmFtc1N0cikge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IEpTT04ucGFyc2UocGFyYW1zU3RyKTtcclxuXHJcbiAgICAgICAgaWYgKHBhcmFtcy5waXhlbHMpIHtcclxuICAgICAgICAgIHRoaXMuY2FudmFzU2l6ZVN3aXRjaGVyLmNhbnZhc0NoYW5nZUVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGVsZW0uZGF0YXNldC5waXhlbHMgPT09IHBhcmFtcy5waXhlbHMpIHtcclxuICAgICAgICAgICAgICBlbGVtLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcmFtcy5jdXJyZW50VG9vbCkge1xyXG4gICAgICAgICAgdGhpcy5jYW52YXNUb29scy5jYW52YXNUb29scy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtLmRhdGFzZXQudG9vbCA9PT0gcGFyYW1zLmN1cnJlbnRUb29sKSB7XHJcbiAgICAgICAgICAgICAgZWxlbS5jbGljaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJhbXMuY3VycmVudENvbG9yKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbG9yVG9vbHMuc2V0Q3VycmVudENvbG9yKHBhcmFtcy5jdXJyZW50Q29sb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcmFtcy5wcmV2Q29sb3IpIHtcclxuICAgICAgICAgIHRoaXMuY29sb3JUb29scy5zZXRQcmV2Q29sb3IocGFyYW1zLnByZXZDb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvYWRJbWFnZShwYXJhbXMuaW1hZ2VTcmMpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgYWxlcnQoJ0xvYWRpbmcgc2F2aW5nIHN0YXRlIHdhcyBmYWlsZWQuIEFuIGVtcHR5IGNhbnZhcyB3aWxsIGNyZWF0ZS4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuc2VhcmNoSW1hZ2UuaW5pdCgpO1xyXG4gICAgdGhpcy5jYW52YXNUb29scy5pbml0KCk7XHJcbiAgICB0aGlzLmNvbG9yVG9vbHMuaW5pdCgpO1xyXG4gICAgdGhpcy5jYW52YXNTaXplU3dpdGNoZXIuaW5pdCgpO1xyXG4gICAgdGhpcy5nZXRDYW52YXNTdGF0ZSgpO1xyXG4gICAgdGhpcy5zZXRFdmVudHMoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICcuLi9zdHlsZXMvc3R5bGUuY3NzJztcblxuLy8gaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IENhbnZhcyBmcm9tICcuL2NhbnZhcyc7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGNvbnN0IHBhbGV0dGUgPSBuZXcgQ2FudmFzKCdwYWxldHRlJyk7XG4gIHBhbGV0dGUuaW5pdCgpO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdCk7XG4iXSwic291cmNlUm9vdCI6IiJ9