!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);i(1);class s{static getColor(t){if("string"==typeof t)return`#${t}`;let e=[...t];try{e[3]=4===e.length?(e[3]/255).toFixed(2):1,e=`rgba(${e.join(",")})`}catch(t){return"#000"}return e}static showMessage(t){alert(t)}}class o{constructor(t){t?(this.canvas=document.getElementById(t),this.canvas?(this.width=this.canvas.width,this.height=this.canvas.height,this.ctx=this.canvas.getContext("2d"),this.pixels=4,this.currenColorField=document.getElementById("current_color"),this.currentColorIcon=document.querySelector(".icon_color--current-color"),this.prevColorIcon=document.querySelector(".icon_color--prev_color"),this.currentColor=window.getComputedStyle(this.currentColorIcon).backgroundColor,this.currentTool=null,this.isPencilDrawStart=!1,this.pencilX=0,this.pencilY=0,this.toolsActions={paintBucket:"fillArea",pencil:"drawByPencil",colorPicker:"chooseColor"},this.keyBindingsCodes=["KeyB","KeyP","KeyC"],this.keyBindingsTools={KeyB:"paintBucket",KeyC:"colorPicker",KeyP:"pencil"},this.eventsTypes={mousedown:"mousedown",mouseup:"mouseup",mousemove:"mousemove"}):s.showMessage(`Error: canvas element with id ${t} was not found.`)):s.showMessage("Error: canvasId is not set.")}get pixelSize(){return this.width/this.pixels}setEvents(){this.canvasTools=document.querySelectorAll("[data-action]"),this.colorChangeElems=document.querySelectorAll(".item--color_change");const t=document.querySelectorAll(".canvas_change");document.addEventListener("keyup",this.manageKeyBindings.bind(this)),this.canvasTools.forEach(t=>{const{action:e}=t.dataset;t.addEventListener("click",this[e].bind(this,t))}),this.canvas.addEventListener("mousedown",this.manageCanvasActions.bind(this)),this.canvas.addEventListener("mouseup",this.manageCanvasActions.bind(this)),this.canvas.addEventListener("mousemove",this.manageCanvasActions.bind(this)),this.currenColorField.addEventListener("change",this.changeCurrentColor.bind(this)),this.colorChangeElems.forEach(t=>{t.addEventListener("click",this.setCurrentColor.bind(this,t))}),t.forEach(t=>{t.classList.contains("active")&&this.changeCanvasSize.bind(t),t.addEventListener("click",this.changeCanvasSize.bind(this,t))})}removeToolsActiveClass(){this.canvasTools.forEach(t=>{t.classList.remove("active")})}clearCanvas(){this.resetTools(),this.ctx.clearRect(0,0,this.width,this.height)}manageCanvasActions(t){const e=this.toolsActions[this.currentTool];e&&this[e](t)}resetTools(){this.removeToolsActiveClass(),this.canvas.classList.remove(this.currentTool),this.currentTool=null,this.isPencilDrawStart=!1,this.pencilX=0,this.pencilY=0}setTool(t){this.removeToolsActiveClass(),t.classList.add("active");const{tool:e}=t.dataset;this.canvas.classList.remove(this.currentTool),this.currentTool=e,this.canvas.classList.add(this.currentTool)}manageKeyBindings(t){this.keyBindingsCodes.includes(t.code)&&document.querySelector(`[data-tool="${this.keyBindingsTools[t.code]}"]`).click()}fillArea(t){t.type===this.eventsTypes.mousedown&&(this.ctx.fillStyle=this.currentColor,this.ctx.fillRect(0,0,this.width,this.height))}chooseColor(t){if(t.type===this.eventsTypes.mousedown){const e=this.getPointedColor(t.clientX,t.clientY);this.setPrevColor(this.currentColor),this.currentColor=e,this.currenColorField.value=e,this.setCurrentIconColor(this.currenColorField,e)}}drawByPencil(t){const e=this.getPointerPosition(t.clientX,t.clientY);t.type===this.eventsTypes.mousedown?(this.isPencilDrawStart=!0,this.drawPixel(e),this.pencilX=e.x,this.pencilY=e.y):t.type===this.eventsTypes.mousemove&&this.isPencilDrawStart?this.drawLine(this.pencilX,this.pencilY,e.x,e.y):t.type===this.eventsTypes.mouseup&&(this.isPencilDrawStart=!1)}drawLine(t,e,i,s){Math.abs(s-e)<Math.abs(i-t)?t>i?this.drawLineLow(i,s,t,e):this.drawLineLow(t,e,i,s):e>s?this.drawLineHigh(i,s,t,e):this.drawLineHigh(t,e,i,s),this.pencilX=i,this.pencilY=s}drawLineLow(t,e,i,s){const o=i-t;let n=s-e,r=1;n<0&&(r=-1,n=-n);let c=2*n-o,l=e;for(let e=t;e<=i;e+=1)this.drawPixel({x:e,y:l}),c>0&&(l+=r,c-=2*o),c+=2*n}drawLineHigh(t,e,i,s){let o=i-t;const n=s-e;let r=1;o<0&&(r=-1,o=-o);let c=2*o-n,l=t;for(let t=e;t<=s;t+=1)this.drawPixel({x:l,y:t}),c>0&&(l+=r,c-=2*n),c+=2*o}drawPixel(t){this.ctx.fillStyle=this.currentColor,this.ctx.fillRect(t.x*this.pixelSize,t.y*this.pixelSize,this.pixelSize,this.pixelSize)}getPointerPosition(t,e){const i=this.canvas.getBoundingClientRect();return{x:Math.floor((t-i.left)/this.pixelSize),y:Math.floor((e-i.top)/this.pixelSize)}}getPointedColor(t,e){const i=this.canvas.getBoundingClientRect(),o=t-i.left,n=e-i.top;let r=this.ctx.getImageData(o,n,1,1).data;return r=s.getColor(r)}changeCurrentColor(t){const e=t.target,i=e.value;this.setPrevColor(this.currentColor),this.currentColor=i,this.setCurrentIconColor(e,i)}setCurrentIconColor(t,e){t.closest(".tools_group__item").querySelector(".icon_color").style.backgroundColor=e}setPrevColor(t){this.prevColor=t,this.prevColorIcon.style.backgroundColor=t}setCurrentColor(t){const e=t.querySelector(".icon_color"),i=window.getComputedStyle(e).backgroundColor;this.currentColor=i,this.currenColorField.value=i,this.currentColorIcon.style.backgroundColor=i}changeCanvasSize(t){const e=t.classList;e.contains("active")||(document.querySelector(".canvas_change.active").classList.remove("active"),e.add("active"),this.pixels=t.dataset.pixels,this.clearCanvas())}init(){this.setEvents()}}document.addEventListener("DOMContentLoaded",(function(){new o("palette").init()}))},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,